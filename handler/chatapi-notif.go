package handler

import (
	"context"
	"errors"
	"fmt"
	"github.com/sirupsen/logrus"
	"gitlab.com/faemproject/backend/faem/pkg/logs"
	"gitlab.com/faemproject/backend/faem/pkg/structures"
	"gitlab.com/faemproject/backend/faem/pkg/structures/tool"
	"gitlab.com/faemproject/backend/faem/pkg/variables"
	"gitlab.com/faemproject/backend/faem/services/msgbot/proto"
	"math"
	"math/rand"
	"strconv"
	"time"
)

func (h *Handler) NotificateWhenRideWillStart(ctx context.Context, state structures.OfferStates) {

	//skip if not ride staring
	if state.State != variables.OrderStates["OnPlace"] {
		return
	}

	log := logs.Eloger.WithFields(logrus.Fields{
		"event":     "notificate user in whatsapp",
		"orderUUID": state.OrderUUID,
	})

	log.Info("Start sending notification to WhatsApp")

	//msg := "–ñ–µ–ª–∞–µ–º –≤–∞–º –ø—Ä–∏—è—Ç–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏ –∏ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º –ü–æ–±–µ–¥—ã! ‚≠êüí•üéá \n --- \n–í–µ—Å—å –º–∞–π –¥–ª—è –≤–∞—Å —Å–∫–∏–¥–∫–∞ 7% –Ω–∞ –≤—Å–µ –ø–æ–µ–∑–¥–∫–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤–æ–µ —Å—É–ø–µ—Ä–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è > https://faem.ru/wapp \n\nüöï –∑–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–∞–∫—Å–∏, –¥–æ—Å—Ç–∞–≤–∫—É, –∞ —Å–∫–æ—Ä–æ üõµ –µ–¥—É –∏ –ø—Ä–æ–¥—É–∫—Ç—ã \nüí≥ –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –∫–∞—Ä—Ç–æ–π \nüöó —Ü–µ–Ω—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç–µ –≤—ã \nüí¨ —á–∞—Ç —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º \n ...–∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ"

	var startPhrase []string
	startPhrase = append(startPhrase, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ —Å–ª—É–∂–±–∞ —Ç–∞–∫—Å–∏. –í–∞—Å –æ–∂–∏–¥–∞–µ—Ç:")
	startPhrase = append(startPhrase, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ —Å–ª—É–∂–±–∞ —Ç–∞–∫—Å–∏. –ö –í–∞–º –ø–æ–¥—ä–µ—Ö–∞–ª–∞.")
	startPhrase = append(startPhrase, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ —Å–ª—É–∂–±–∞ —Ç–∞–∫—Å–∏. –ê–≤—Ç–æ –Ω–∞ –º–µ—Å—Ç–µ.")
	startPhrase = append(startPhrase, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ —Å–ª—É–∂–±–∞ —Ç–∞–∫—Å–∏. –ê–≤—Ç–æ –ø–æ–¥—ä–µ—Ö–∞–ª–æ.")
	startPhrase = append(startPhrase, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ —Å–ª—É–∂–±–∞ —Ç–∞–∫—Å–∏. –í–æ–¥–∏—Ç–µ–ª—å –í–∞—Å –æ–∂–∏–¥–∞–µ—Ç.")
	startPhrase = append(startPhrase, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ —Å–ª—É–∂–±–∞ —Ç–∞–∫—Å–∏. –í–∞—Å –æ–∂–∏–¥–∞–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—å.")
	startPhrase = append(startPhrase, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ —Å–ª—É–∂–±–∞ —Ç–∞–∫—Å–∏. –≤–æ–¥–∏—Ç–µ–ª—å –ø–æ–¥—ä–µ—Ö–∞–ª –∫ –∞–¥—Ä–µ—Å—É.")
	startPhrase = append(startPhrase, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ —Å–ª—É–∂–±–∞ —Ç–∞–∫—Å–∏. –≤–æ–¥–∏—Ç–µ–ª—å –Ω–∞ –º–µ—Å—Ç–µ.")

	var endPhrase []string
	endPhrase = append(endPhrase, "\n\n–ê –≤—ã –∑–Ω–∞–µ—Ç–µ —á—Ç–æ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–Ω–æ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –¥–µ—à–µ–≤–ª–µ? \n–î–∞—Ä–∏–º 100 –±–æ–Ω—É—Å–æ–≤ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (1 –±–æ–Ω—É—Å = 1 —Ä—É–±–ª—å), —Å–∫–∞—á–∞–π—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ üëâ faem.ru/wapp ")
	endPhrase = append(endPhrase, "\n\n–ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏.\n–ê –≤—ã —É–∂–µ —Å–∫–∞—á–∞–ª–∏ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ? –õ—É—á—à–∏–µ —Ü–µ–Ω—ã –Ω–∞ –ø–æ–µ–∑–¥–∫–∏ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ üëâ faem.ru/wapp")
	endPhrase = append(endPhrase, "\n\n–°–∫–∞—á–∞–π—Ç–µ –Ω–∞—à–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ 100 –±–æ–Ω—É—Å–æ–≤ (1 –±–æ–Ω—É—Å = 1 —Ä—É–±–ª—å). –°–∫–∞—á–∞—Ç–µ–π –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å üëâ faem.ru/wapp")
	endPhrase = append(endPhrase, "\n\n–°–∫–∞—á–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ 150 –±–æ–Ω—É—Å–æ–≤ (1 –±–æ–Ω—É—Å = 1 —Ä—É–±–ª—å) –Ω–∞ –ø–æ–µ–∑–¥–∫–∏. –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: faem-wapp. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å üëâ faem.ru/wapp")
	endPhrase = append(endPhrase, "\n\n–ê –≤—ã –∑–Ω–∞–µ—Ç–µ —á—Ç–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã –µ—â–µ –¥–µ—à–µ–≤–ª–µ, –∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 100 –±–æ–Ω—É—Å–æ–≤ (1 –±–æ–Ω—É—Å = 1 —Ä—É–±–ª—å) + 50 —Ä—É–±–ª–µ–π –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É: faem-wapp. –°–∫–∞—á–∞–π—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ üëâ faem.ru/wapp")
	endPhrase = append(endPhrase, "\n\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ –ø–æ–ª—É–∏—Ç–µ 100 –±–æ–Ω—É—Å–æ–≤ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é (1 –±–æ–Ω—É—Å = 1 —Ä—É–±–ª—å). –°–∫–∞—á–∞–π—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ üëâ faem.ru/wapp")
	endPhrase = append(endPhrase, "\n\n–°–∫–∞—á–∞—Ç–µ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏ —Å–º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –µ–¥—É –∏ –ø—Ä–æ–¥—É–∫—Ç—ã. –î–∞—Ä–∏–º 100 —Ä—É–±–ª–µ–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ñ–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É üëâ faem.ru/wapp")

	var feedbackPhrase []string
	feedbackPhrase = append(feedbackPhrase, "\n\n–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –ø–æ–µ–∑–¥–∫–∏ –±—É–¥–µ–º –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω—ã –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤ üôè –∂–µ–ª–∞–µ–º –∫—Ä–µ–ø–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è, –í–∞–º –∏ –í–∞—à–∏–º –±–ª–∏–∑–∫–∏–º")
	feedbackPhrase = append(feedbackPhrase, "\n\n–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—à–µ–º—É –æ—Ç–∑—ã–≤—É üôè –∞ –í–∞–º –∏ –í–∞—à–∏–º –±–ª–∏–∑–∫–∏–º –≤—Å–µ–≥–æ —Å–∞–º–æ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ")
	feedbackPhrase = append(feedbackPhrase, "\n\n–ú—ã —Ö–æ—Ç–∏–º –±—ã—Ç—å –ª—É—á—à–µ, –ø–æ–º–æ–≥–∏—Ç–µ —Å–≤–æ–∏–º –æ—Ç–∑—ã–≤–æ–º –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –ø–æ–µ–∑–¥–∫–∏ üôè –±—É–¥—å—Ç–µ –∑–¥–æ—Ä–æ–≤—ã –í—ã –∏ –í–∞—à–∏ –±–ª–∏–∑–∫–∏–µ")

	rand.Seed(time.Now().Unix())
	n1 := rand.Int() % len(startPhrase)
	n2 := rand.Int() % len(endPhrase)
	n3 := rand.Int() % len(feedbackPhrase)

	taxi, ok := h.Buffers.DriverFounded[state.OrderUUID]
	if !ok {
		log.Error("driver not founded in buffer")
		return
	}

	phrase := fmt.Sprintf("%s %s %s %s", startPhrase[n1], taxi, endPhrase[n2], feedbackPhrase[n3])

	val, err := h.NumberFromBufferByUUID(state.OrderUUID)
	if err != nil {
		log.WithFields(logrus.Fields{
			"reason": "seems like phone is wrong",
		}).Error(err)
		return
	}

	err = h.SendChatApiMsg(val, phrase)
	if err != nil {
		log.Error(err)
	}
	log.Info("Msg sended!")
	delete(h.Buffers.CRMOrders, state.OrderUUID)
	delete(h.Buffers.DriverFounded, state.OrderUUID)
}

func (h *Handler) NumberFromBufferByUUID(uuid string) (string, error) {
	val, ok := h.Buffers.CRMOrders[uuid]
	if !ok {
		return "", errors.New("number not found")
	}

	if len(val) == 0 || len(val) != 12 {
		return "", errors.New("seems like number is wrong")
	}
	return val[1:], nil
}

//SendChatApiMsg send message to WhatsApp
func (h *Handler) SendChatApiMsg(number, msgToSend string) error {

	bucketURL, bucketToken, phone, err := h.getBucket(number)
	url := fmt.Sprintf("%s/sendMessage?token=%s", bucketURL, bucketToken)

	sendMsg := proto.WhAppMsg{
		Phone: phone,
		Body:  msgToSend,
	}

	var resp proto.WhAppMsgResp
	err = tool.SendRequest("POST", url, nil, sendMsg, &resp)
	if err != nil {
		return err
	}

	logs.Eloger.WithFields(logrus.Fields{
		"event":  "send to whatsapp",
		"number": phone,
		"bucket": bucketURL,
	}).Info(msgToSend)

	return nil
}

func (h *Handler) getBucket(number string) (string, string, int, error) {
	phone, err := strconv.Atoi(number)
	if err != nil {
		return "", "", 0, err
	}
	if divisibleBy(phone, 3) {
		return h.Config.ChatApi.URL1, h.Config.ChatApi.Token1, phone, nil
	}
	if divisibleBy(phone, 2) {
		return h.Config.ChatApi.URL2, h.Config.ChatApi.Token2, phone, nil
	}
	return h.Config.ChatApi.URL3, h.Config.ChatApi.Token3, phone, nil
}

func divisibleBy(num int, divisor int) bool {
	if math.Mod(float64(num), float64(divisor)) == 0 {
		return true
	}
	return false
}
