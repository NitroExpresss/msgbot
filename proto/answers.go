package proto

import (
	"errors"
	"fmt"
	"math/rand"
)

var Answers struct {
	Errors  []Constant
	Intents map[Constant][]string
}

var errorsAnswers = []string{
	"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –º–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª—å.\n–ú–æ–∂–µ—Ç –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑.\n\n%s",
	"–ù–µ –Ω–∞–≤–∏–∂—É –æ—à–∏–±–∫–∏ –∞-–∞-–∞-–∞, –Ω–æ –æ–Ω–∏ —Å–ª—É—á–∞—é—Ç—Å—è, –≤–µ–¥—å —è –ø–æ–∫–∞ —É—á—É—Å—å.\n–ß—Ç–æ –µ—Å–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑:\n\n%s",
	"–ù–µ –æ—à–∏–±–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–æ—Ç, –∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç (( –≤–æ–æ–±—â–µ–º —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º–∞\n–î—É–º–∞—é —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑:\n\n%s",
}

var oldErrorsAnswers = []string{
	"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (( \n–í—Å–µ –¥–∞–Ω–Ω—ã–µ —è –ø–µ—Ä–µ–¥–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º, —Å–∫–æ—Ä–æ –º—ã —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏–º. \n",
	"–û—á–µ–Ω—å –∂–∞–ª—å, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. #$~$@%$%^&*()!@#$%^&*()_ \n–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–∂–µ —É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, —è –ø—Ä–æ—Å–ª–µ–∂—É —á—Ç–æ –±—ã –µ–µ —Ä–µ—à–∏–ª–∏\n",
	"–û–æ–æ–æ –Ω–µ—Ç, - –æ—à–∏–±–∫–∞. –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω–∞ —Å–≤–µ—Ç–µ –Ω–µ –Ω–∞–≤–∏–∂—É –æ—à–∏–±–∫–∏.\n–Ø –ø–µ—Ä–µ–¥–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –≤—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ–Ω–∏ –Ω–∞–≤–µ—Ä–Ω–æ —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª—è—é—Ç\n",
}

var TaxiOrderCreated = []string{
	"–°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Ç–∞–∫—Å–∏ üöï\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞–¥—Ä–µ—Å –æ—Ç–∫—É–¥–∞ –≤–∞—Å –∑–∞–±—Ä–∞—Ç—å –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ—é –≥–µ–æ-–ø–æ–∑–∏—Ü–∏—é",
	"üöï üöï –≤–µ–∑–∏, –≤–µ–∑–∏...\n\n–ü—Ä–∏—à–ª–∏—Ç–µ –∞–¥—Ä–µ—Å, —Ç–∫—É–¥–∞ –≤–∞—Å –∑–∞–±—Ä–∞—Ç—å? –ê –µ—â–µ –º–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –≥–µ–æ-–ø–æ–∑–∏—Ü–∏—é.",
	"–ó–∞–∫–∞–∑ —Ç–∞–∫—Å–∏ üöï\n\n...–æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä, –Ω–∞ —Ç–∞–∫—Å–∏, —É –Ω–∞—Å –ª—É—á—à–∏–µ —Ü–µ–Ω—ã –≤ –≥–æ—Ä–æ–¥–µ.\n\n–ù–∞ –∫–∞–∫–æ–π –∞–¥—Ä–µ—Å –ø—Ä–∏—Å–ª–∞—Ç—å –∞–≤—Ç–æ?",
}

var tempUnavailable = []string{
	"–ú–Ω–µ –∂–∞–ª—å –Ω–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. üßò",
	"–ú—ã –µ—â–µ –Ω–µ —É—Å–ø–µ–ª–∏ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å. ü§î",
	"–≠—Ç–æ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç üòí —Å–∫–æ—Ä–æ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç",
}

var taxiOrderStarted = []string{
	"–ü–æ–Ω–µ—Å–ª–∞—Å—å... –∏—â—É –¥–ª—è –≤–∞—Å –±–ª–∏–∂–∞–π—à–µ–µ –∞–≤—Ç–æ üòá",
	"–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω üòâ –∏—â—É –∞–≤—Ç–æ",
}

//var TaxiOrderChangeService = []string{
//	"–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã:\n",
//}

var TaxiOrderPaymentMethod = tempUnavailable

var ArrivalFixed = []string{
	"üöï –ê–¥—Ä–µ—Å –ø–æ–¥–∞—á–∏: %s\n\nüöï –ê–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: %s\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–µ–∑–¥–∫–∏: %v‚ÇΩ (%s)\n\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: %s\n",
}
var DepartureFixed = []string{
	"–ê–¥—Ä–µ—Å —Ç–µ–ø–µ—Ä—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω, –∫–∞–∫ –Ω–∞—Å—á–µ—Ç:\n\n%s\n\n–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ –ø—Ä–∏—à–ª–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
	"–ù–æ–≤—ã–π –∞–¥—Ä–µ—Å –ø–æ–¥–∞—á–∏:\n\n%s\n\n–ö—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–∏–º—Å—è:",
}

var TaxiFixDepartureAddress = []string{
	"–ê–¥—Ä–µ—Å: %s –Ω–µ –≤–µ—Ä–Ω—ã–π?\n\n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–¥–∞—á–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ, –∏–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã—Ö:\n\n%s",
}

var TaxiFixArrivalAddress = []string{
	"–ê–¥—Ä–µ—Å: %s –Ω–µ –≤–µ—Ä–Ω—ã–π?\n\n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ, –∏–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã—Ö:\n\n%s",
}

var FoodOrderCreate = []string{
	"–ú–Ω–µ –∂–∞–ª—å üòî –Ω–æ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. \n–ú—ã –ø–ª–∞–Ω–∏—Ä—É–µ–º –µ–≥–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å 15 –∞–≤–≥—É—Å—Ç–∞. –Ø –Ω–∞–ø–∏—à—É, –∫–∞–∫ –æ–Ω –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.\n\n–ü–æ–∫–∞ –º–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏.",
	"—ç—ç—ç—ç—ç üò∂ –∑–∞–∫–∞–∑ –µ–¥—ã –µ—â–µ –Ω–µ –≤–∫–ª—é—á–∏–ª–∏.\n–û–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–µ –∞–≤–≥—É—Å—Ç–∞, —è –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ–Ω –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.\n–ê –ø–æ–∫–∞ –º–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏)",
}

var NeedPhone = []string{
	"–£ –º–µ–Ω—è –Ω–µ—Ç –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —á—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∞–≤—Ç–æ",
}

var UnexpectedContact = []string{
	"–î–∏–∫–æ –∏–∑–≤–∏–Ω—è—é—Å—å, –Ω–æ —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ –º–Ω–µ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º?\n–í–µ—Ä–Ω–µ–º—Å—è –∫ –¥–∏–∞–ª–æ–≥—É?",
	"–ê –∑–∞—á–µ–º –º–Ω–µ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é... üò¨",
}

var UnexpectedCoordinates = []string{
	"–Ø –Ω–µ –æ—á–µ–Ω—å –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –º–Ω–µ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏...üò¨",
	"–ö–æ–æ—Ä–∏–¥–Ω–∞—Ç—ã? –ê –∑–∞—á–µ–º? –ù–µ –ø–æ–π–º—É —á—Ç–æ —Å –Ω–∏–º–∏ –¥–µ–ª–∞—Ç—å...",
}

var driverFounded = []string{
	"–£—Ä–∞, –º—ã –Ω–∞—à–ª–∏ –¥–ª—è –≤–∞—Å –º–∞—à–∏–Ω—É!\n\n–ß–µ—Ä–µ–∑ %v –º–∏–Ω—É—Ç –∫ –≤–∞–º –ø–æ–¥—ä–µ–¥–µ—Ç %s %s –Ω–æ–º–µ—Ä–∞ %s \n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ...",
	"–ü–æ–ª—É—á–∏–ª–æ—Å—å!\n\n–ß–µ—Ä–µ–∑ %v –º–∏–Ω—É—Ç –∫ –≤–∞–º –ø–æ–¥—ä–µ–¥–µ—Ç %s %s –Ω–æ–º–µ—Ä–∞ %s \n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ...",
}
var onTheWay = []string{
	"–ü–æ–µ—Ö–∞–ª–∏! –°–ª–µ–¥—É—é—â–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ %s.\n\n–•–æ—Ä–æ—à–µ–π –ø–æ–µ–∑–¥–∫–∏.",
	"–°–ª–µ–¥—É—é—â–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ %s.\n\n–ü–æ–µ—Ö–∞–ª–∏!",
}

var driverOnPlace = []string{
	"–í–∞—Å –æ–∂–∏–¥–∞–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã—Ö–æ–¥–∏—Ç–µ",
	"–í–æ–¥–∏—Ç–µ–ª—å –Ω–∞ –º–µ—Å—Ç–µ. –í—ã—Ö–æ–¥–∏—Ç–µ",
}

var orderFinished = []string{
	"–í–∞—à –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –°–ø–∞—Å–∏–±–æ",
	"–ü—Ä–∏–µ—Ö–∞–ª–∏, –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞.",
}

var orderCancelled = []string{
	"–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω, –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞.\n",
	"–ñ–∞–ª—å –∫–æ–Ω–µ—á–Ω–æ, –Ω–æ –≤–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω ü§∑\n",
}

var driverNotFounded = []string{
	"–û—á–µ–Ω—å –∂–∞–ª—å, –Ω–æ –º—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è –∏ –æ—Ç–º–µ–Ω–∏–ª–∏ –≤–∞—à –∑–∞–∫–∞–∑",
	"–û, –Ω–µ—Ç! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω, –º—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ –Ω–∞—à–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—è üòî",
}

///

//—Ñ—Ä–∞–∑—ã –∏ —Å–ª–æ–≤–∞—Ä–∏
type PhrasesDict struct {
	dict   []string
	phrase Constant
}

func initAnswers() {
	Answers.Intents = make(map[Constant][]string)

	//–æ—à–∏–±–∫–∏
	for _, v := range errorsAnswers {
		Answers.Errors = append(Answers.Errors, Constant(v))
	}

	pDic := []PhrasesDict{
		{
			//—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏
			dict:   TaxiOrderCreated,
			phrase: States.Taxi.Order.CreateDraft,
		},
		{
			//–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –æ—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å
			dict:   TaxiFixDepartureAddress,
			phrase: States.Taxi.Order.FixDeparture,
		},
		{
			dict:   TaxiFixArrivalAddress,
			phrase: States.Taxi.Order.FixArrival,
		},
		{
			dict:   ArrivalFixed,
			phrase: States.Taxi.Order.Arrival,
		},
		{
			dict:   DepartureFixed,
			phrase: States.Taxi.Order.Departure,
		},
		{
			//–∏–∑–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥—É
			dict:   ArrivalFixed,
			phrase: States.Taxi.Order.ChangeService,
		},
		{
			//–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
			dict:   TaxiOrderPaymentMethod,
			phrase: States.Taxi.Order.PaymentMethod,
		},
		{
			//–º—ã –∂–¥–µ–º –Ω–æ–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
			dict:   NeedPhone,
			phrase: States.Taxi.Order.NeedPhone,
		},
		{
			//–≤–Ω–µ–∑–∞–ø–Ω–æ –ø—Ä–∏—Å–ª–∞–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç
			dict:   UnexpectedContact,
			phrase: States.Unknown.UnexpectedContact,
		},
		{
			//–≤–Ω–µ–∑–∞–ø–Ω–æ –ø—Ä–∏—Å–ª–∞–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
			dict:   UnexpectedCoordinates,
			phrase: States.Unknown.UnexpectedCoordinates,
		},

		{
			//—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –µ–¥—ã
			dict:   FoodOrderCreate,
			phrase: States.Food.Order.Create,
		},
		{
			dict:   taxiOrderStarted,
			phrase: States.Taxi.Order.OrderCreated,
		},
		{
			dict:   driverFounded,
			phrase: States.Taxi.Order.OrderStart,
		},

		{
			dict:   onTheWay,
			phrase: States.Taxi.Order.OnTheWay,
		},
		{
			dict:   driverOnPlace,
			phrase: States.Taxi.Order.OnPlace,
		},
		{
			dict:   orderFinished,
			phrase: States.Taxi.Order.Finished,
		},
		{
			dict:   orderCancelled,
			phrase: States.Taxi.Order.Cancelled,
		},
		{
			dict:   driverNotFounded,
			phrase: States.Taxi.Order.DriverNotFound,
		},
	}
	for _, d := range pDic {
		for _, e := range d.dict {
			Answers.Intents[d.phrase] = append(Answers.Intents[d.phrase], e)
		}
	}
}

func GetIntentText(state Constant) (string, error) {
	if val, ok := Answers.Intents[state]; ok {
		if len(Answers.Intents[state]) == 1 {
			return val[0], nil
		}
		return val[rand.Intn(len(Answers.Intents[state])-1)], nil
	}
	ans := fmt.Sprintf("intent data to founded in dictionary. State: %s", state.S())
	return "–Ø –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å (( –º–Ω–µ –æ—á–µ–Ω—å –∂–∞–ª—å", errors.New(ans)
}

//GetErrorText –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–µ–∫—Å—Ç —Å –æ—à–∏–±–∫–æ–π
func GetErrorText(currentState string) string {

	template := Answers.Errors[rand.Intn(len(errorsAnswers)-1)].S()
	result := fmt.Sprintf(template, expectState(currentState))

	return result
}

//–≤–æ–∑—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ —Ç–æ–º —á—Ç–æ –º—ã –∂–¥–µ–º –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
func expectState(state string) string {
	switch state {
	case States.Welcome.S():
		return "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–∫—É –∑–∞–∫–∞–∑–∞ –¢–∞–∫—Å–∏ –∏–ª–∏ –ï–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /start"
	case States.Taxi.Order.CreateDraft.S():
		return "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –∞–¥—Ä–µ—Å–∞, –æ—Ç–∫—É–¥–∞ –≤–∞—Å –∑–∞–±—Ä–∞—Ç—å?"
	case States.Taxi.Order.Departure.S():
		return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–º –∞–¥—Ä–µ—Å –∫—É–¥–∞ –ø–æ–µ–¥–µ–º?"
	case States.Taxi.Order.FixDeparture.S():
		return "–í–µ–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π"
	case States.Taxi.Order.FixArrival.S():
		return "–í–µ–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π"
	case States.Taxi.Order.Arrival.S():
		return "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å —Ç–∞–∫—Å–∏, –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ —Ç–∞—Ä–∏—Ñ. –î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –∞ —É–∂–µ –ø–æ—Ç–æ–º –µ–≥–æ –æ—Ç–º–µ–Ω–∏—Ç—å"
	case States.Taxi.Order.ChangeService.S():
		return "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤—ã—à–µ –∫–ª–∞—Å—Å–æ–≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"
	case States.Taxi.Order.NeedPhone.S():
		return "–Ø –æ–∂–∏–¥–∞—é —á—Ç–æ –≤—ã –ø—Ä–∏—à–ª–µ—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç —á—Ç–æ –±—ã —è –º–æ–≥ –∑–∞–ø–∏—Å–∞—Ç—å –∞–¥—Ä–µ—Å"
	case States.Taxi.Order.OrderCreated.S():
		return "–í–∞—à –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω. –í–æ–∑–º–æ–∂–æ –∫–∞–∫–∞—è —Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞, —è –≤—Å–µ –ø–µ—Ä–µ–¥–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º"
	case States.Taxi.Order.FindingDriver.S(), States.Taxi.Order.SmartDistribution.S(), States.Taxi.Order.OfferOffered.S():
		return "–ú—ã –∏—â–µ–º –¥–ª—è –≤–∞—Å –∞–≤—Ç–æ. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ `‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑`, –≤ –æ–¥–Ω–æ–º –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"
	default:
		return ""
	}
}
